************************* SET ************************* 


'''Множество (set) представляют еще один вид набора элементов. Для определения множества используются фигурные скобки, в которых перечисляются элементы:'''


# Creating a Set 
set1 = set() 
print("Intial blank Set: ") 
print(set1) 
  
# Creating a Set with the use of a String 
set1 = set("MakersCodingIsEasy") 
print("\nSet with the use of String: ") 
print(set1) 
  
# Creating a Set with the use of Constructor (Using object to Store String) 
String = 'MakersCodingIsEasy'
set1 = set(String) 
print("\nSet with the use of an Object: " ) 
print(set1) 
  
# Creating a Set with the use of a List 
set1 = set(["Makers", "Coding", "Is", "Makers"]) 
print("\nSet with the use of List: ") 
print(set1) 

# Creating a Set with a List of Numbers 
# (Having duplicate values) 
set1 = set([1, 2, 4, 4, 3, 3, 3, 6, 5]) 
print("\nSet with the use of Numbers: ") 
print(set1) 
print(type(set1))
  
# Creating a Set with a mixed type of values 
# (Having numbers and strings) 
set1 = set([1, 2, 'Makers', 4, 'Coding', 6, 'Easy']) 
print("\nSet with the use of Mixed Values") 
print(set1) 


users = {"Tom","Bob","Alice", "Tom"}
print(users) 

'''Обратите внимание, что несмотря на то, что функция print вывела один раз элемент "Tom", хотя в определении множества этот элемент содержится два раза. Все потому что множество содержит только уникальные значения.

Также для определения множества может применяться функция set(), в которую передается список или кортеж элементов:'''

users3 = set(["Mike", "Bill", "Ted"])

'''Функцию set удобно применять для создания пустого множества:'''

users = set()

'''
Для получения длины множества применяется встроенная функция len():
'''

users = {"Tom","Bob","Alice"}
print(len(users))   # 3

'''
Добавление элементов

Для добавления одиночного элемента вызывается метод add():
'''

users = set()
users.add("Sam")
users.add('dastan')
users.add('Ulan')
users.add('Feis')
print(users)

'''
Удаление элементов

Для удаления одного элемента вызывается метод remove(), в который передается удаляемый элемент. Но следует учитывать, что если такого элемента не окажется в множестве, то будет сгенерирована ошибка. Поэтому перед удалением следует проверять на наличие элемента с помощью оператора in:
'''

users = {"Tom", "Bob", "Alice"}
 
user = "Tom"
if user in users: 
    users.remove(user)
print(users)    # {"Bob", "Alice"}


'''
Для удаления всех элементов вызывается метод clear():
'''

users.clear()

'''
Перебор множества

Для перебора элементов можно использовать цикл for:
'''

users = {"Tom","Bob","Alice"}
 
for user in users:
    print(user, end=' ')


'''
Операции с множествами

С помощью метода copy() можно скопировать содержимое одного множества в другую переменную:'''

# Метод union() объединяет два множества и возвращает новое множество:


users = {"Tom","Bob","Alice"}
users2 = {"Sam","Kate", "Bob"}
 
users3 = users.union(users2)
print(users3)   # {"Bob", "Alice", "Sam", "Kate", "Tom"}


'''
intersection()
Пересечение множеств позволяет получить только те элементы, которые есть одновременно в обоих множествах. Метод intersection() производит операцию пересечения множеств и возвращает новое множество:'''


users = {"Tom","Bob","Alice"}
users2 = {"Sam","Kate", "Bob"}
 
users3 = users.intersection(users2)
print(users3)   # {"Bob"}

# Вместо метода intersection мы могли бы использовать операцию логического умножения:

users = {"Tom","Bob","Alice"}
users2 = {"Sam","Kate", "Bob"}
 
print(users & users2)   # {"Bob"}


'''
difference()
Еще одна операция - разность множеств возвращает те элементы, которые есть в первом множестве, но отсутствуют во втором. Для получения разности множеств можно использовать метод difference или операцию вычитания:'''


users = {"Tom","Bob","Alice"}
users2 = {"Sam","Kate", "Bob"}
 
users3 = users.difference(users2)
print(users3)           # {"Tom", "Alice"}
print(users - users2)   # {"Tom", "Alice"}



# Отношения между множествами


'''Метод issubset позволяет выяснить, является ли текущее множество подмножеством (то есть частью) другого множества:'''

users = {"Tom", "Bob", "Alice"}
superusers = {"Sam", "Tom", "Bob", "Alice", "Greg"}
 
print(users.issubset(superusers))
print(superusers.issubset(users))


'''Метод issuperset, наоборот, возвращает True, если текущее множество является надмножеством (то есть содержит) для другого множества:'''


users = {"Tom", "Bob", "Alice"}
superusers = {"Sam", "Tom", "Bob", "Alice", "Greg"}
 
print(users.issuperset(superusers))
print(superusers.issuperset(users))


#  #####   FROZEN SET #####

'''Тип frozen set является видом множеств, которое не может быть изменено. Для его создания используется функция frozenset:'''

users = frozenset({"Tom", "Bob", "Alice"})
users.remove("Tom")


'''
В функцию frozenset передается набор элементов - список, кортеж, другое множество.

В такое множество мы не можем добавить новые элементы, как и удалить из него уже имеющиеся. Собственно поэтому frozen set поддерживает ограниченный набор операций:

    len(s): возвращает длину множества

    x in s: возвращает True, если элемент x присутствует в множестве s

    x not in s: возвращает True, если элемент x отсутствует в множестве s

    s.issubset(t): возвращает True, если t содержит множество s

    s.issuperset(t): возвращает True, если t содержится в множестве s

    s.union(t)
    : возвращает объединение множеств s и t

    s.intersection(t): возвращает пересечение множеств s и t

    s.difference(t): возвращает разность множеств s и t

    s.copy(): возвращает копию множества s

'''


###### SET METHODS ######


'''
add() 	        Adds an element to a set

remove() 	    Removes an element from a set. If the element is not present in the set, raise a KeyError

clear() 	    Removes all elements form a set

copy() 	        Returns a shallow copy of a set

pop() 	        Removes and returns an arbitary set element. Raise KeyError if the set is empty

update() 	    Updates a set with the union of itself and others

union() 	    Returns the union of sets in a new set

difference()    Returns the difference of two or more sets as a new set

difference_update() 	Removes all elements of another set from this set

discard() 	    Removes an element from set if it is a member. (Do nothing if the element is not in set)

intersection() 	Returns the intersection of two sets as a new set

intersection_update() 	Updates the set with the intersection of itself and another

isdisjoint()    Returns True if two sets have a null intersection

issubset() 	    Returns True if another set contains this set

issuperset() 	Returns True if this set contains another set

symmetric_difference() 	Returns the symmetric difference of two sets as a new set

symmetric_difference_update() 	Updates a set with the symmetric difference of itself and another
'''


